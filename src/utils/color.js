/**
 * auto generated by task build:theme
 */
import vars from './color.json';

function d2h(d) {
  return d.toString(16);
}

function h2d(h) {
  return parseInt(h, 16);
}

function marshal(color) {
  color = color.trim().replace('#', '').split('');
  color.forEach(c => {
    if (c > 'f' || c < '0') {
      throw new Error('invalid hex color: ' + color);
    }
  });
  color = color.join('');

  if (color.length === 3) {
    color = `${color[0]}${color[0]}${color[1]}${color[1]}${color[2]}${color[2]}`;
  }

  if (color.length !== 6) {
    throw new Error('invalid hex color length, should be 3 or 6 chars: ' + color);
  }

  return color;
}

function assertValidWeight(weight) {
  if (weight < 0 || weight > 1) {
    throw new Error('invalid weight, should in [0, 1]: ' + weight);
  }
}

function doub(n) {
  return n < 10 ? '0' + n : n;
}

/**
 * weight: [0, 1]
 * return color start with #
 */
export function mix(color1, color2, weight = 0.5) {
  if (parseFloat(weight, 10) === 0) {
    return color2;
  }

  assertValidWeight(weight);

  if (!color1 || color1 === 'transparent') {
    return `rgba(${color2}, ${1 - weight})`;
  }

  if (!color2 || color2 === 'transparent') {
    return `rgba(${color1}, ${weight})`;
  }

  color1 = marshal(color1);
  color2 = marshal(color2);

  let color = '#';
  for (let i = 0; i < 5; i += 2) {
    const v1 = h2d(color1.substr(i, 2));
    const v2 = h2d(color2.substr(i, 2));
    const v = doub(d2h(Math.floor(v2 + (v1 - v2) * weight)));
    color += v;
  }

  return color;
}

function getGlobalCssVar(name) {
  name = marshalVarName(name);
  return getComputedStyle(document.body).getPropertyValue(name).trim();
}

export function setGlobalCssVar(name, value) {
  name = marshalVarName(name);
  document.body.style.setProperty(name, value);
}

function marshalVarName(varName) {
  if (varName.startsWith('--')) {
    return varName;
  }
  return `--${varName}`;
}

/**
 * var1 var2 should be :root css variables
 */
const colors = {
  white: '#fff',
  black: '#000',
  transparent: undefined
};
export function mixVar(var1 = 'transparent', var2 = 'transparent', weight) {
  const color1 = var1 in colors ? colors[var1] : getGlobalCssVar(var1);
  const color2 = var2 in colors ? colors[var2] : getGlobalCssVar(var2);

  if (weight) {
    let value = parseFloat(weight, 10);
    if (isNaN(value)) {
      value = parseFloat(getGlobalCssVar(weight)) || undefined;
    } else if (weight > 1) {
      value = weight / 100;
    }
    weight = value;
  }

  return mix(color1, color2, weight);
}

export function refreshColors() {
  setGlobalCssVar('--color-primary-light-1', mixVar('--color-white', '--color-primary', 0.1));
  setGlobalCssVar('--color-primary-light-2', mixVar('--color-white', '--color-primary', 0.2));
  setGlobalCssVar('--color-primary-light-3', mixVar('--color-white', '--color-primary', 0.3));
  setGlobalCssVar('--color-primary-light-4', mixVar('--color-white', '--color-primary', 0.4));
  setGlobalCssVar('--color-primary-light-5', mixVar('--color-white', '--color-primary', 0.5));
  setGlobalCssVar('--color-primary-light-6', mixVar('--color-white', '--color-primary', 0.6));
  setGlobalCssVar('--color-primary-light-7', mixVar('--color-white', '--color-primary', 0.7));
  setGlobalCssVar('--color-primary-light-8', mixVar('--color-white', '--color-primary', 0.8));
  setGlobalCssVar('--color-primary-light-9', mixVar('--color-white', '--color-primary', 0.9));

  setGlobalCssVar('--color-success-light', mixVar('--color-white', '--color-success', 0.8));
  setGlobalCssVar('--color-warning-light', mixVar('--color-white', '--color-warning', 0.8));
  setGlobalCssVar('--color-danger-light', mixVar('--color-white', '--color-danger', 0.8));
  setGlobalCssVar('--color-info-light', mixVar('--color-white', '--color-info', 0.8));

  setGlobalCssVar('--color-success-lighter', mixVar('--color-white', '--color-success', 0.9));
  setGlobalCssVar('--color-warning-lighter', mixVar('--color-white', '--color-warning', 0.9));
  setGlobalCssVar('--color-danger-lighter', mixVar('--color-white', '--color-danger', 0.9));
  setGlobalCssVar('--color-info-lighter', mixVar('--color-white', '--color-info', 0.9));

  setGlobalCssVar('--slider-button-hover-color', mixVar('--color-primary', '--color-black', 0.97));

  Object.keys(vars).forEach(name => {
    setGlobalCssVar(name, mixVar(...vars[name]));
  });
}
